<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Perícia">
    <description><![CDATA[.]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Secretaria e Gabinete">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10:1338,9:1469')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition to="Administrar perícia" name="Administrar perícia"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="Administrar perícia">
        <task name="Administrar perícia" swimlane="Secretaria e Gabinete" priority="3">
            <controller>
                <variable name="Processo_Fluxo_frameAnalisarPericia" mapped-name="frame:Processo_Fluxo_frameAnalisarPericia" access="read,write"/>
                <variable name="designarPericiaEmLote" mapped-name="designarPericiaLote:designarPericiaEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Término" name="Saída de exceção"/>
        <transition to="Nó de Desvio - Perícia" name="Nó de Desvio - Perícia">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Conclusão para despacho" name="Conclusão para despacho"/>
        <transition to="Conclusão para julgamento" name="Conclusão para julgamento"/>
        <transition to="Conclusão para decisão" name="Conclusão para decisão"/>
        <transition to="Conclusão urgente" name="Conclusão urgente"/>
        <transition to="Preparar ato de comunicação" name="Preparar ato de comunicação"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo','false')}"/>
        </event>
    </task-node>
    <node name="Conclusão para despacho">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('saidaPericia', 'despacho')}"/>
        </event>
    </node>
    <node name="Conclusão para julgamento">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('saidaPericia', 'sentenca')}"/>
        </event>
    </node>
    <node name="Conclusão para decisão">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('saidaPericia', 'decisao')}"/>
        </event>
    </node>
    <node name="Conclusão urgente">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('saidaPericia', 'urgente')}"/>
        </event>
    </node>
    <node name="Preparar ato de comunicação">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('saidaPericia', 'comunicacao')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - Perícia">
        <task name="Nó de Desvio - Perícia" priority="3"/>
        <transition to="Administrar perícia" name="Administrar perícia"/>
        <transition to="Término" name="Término"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
